
        private void setupListView()
        {
            listView1.Dock = System.Windows.Forms.DockStyle.Fill;

            listView1.View = View.LargeIcon;
            listView1.MultiSelect = false;
            listView1.ListViewItemSorter = new ListViewIndexComparer();

            listView1.InsertionMark.Color = Color.Green;

            listView1.AllowDrop = true;
            listView1.ItemDrag += new ItemDragEventHandler(listView1_ItemDrag);
            listView1.DragEnter += new DragEventHandler(listView1_DragEnter);
            listView1.DragOver += new DragEventHandler(listView1_DragOver);
            listView1.DragLeave += new EventHandler(listView1_DragLeave);
            listView1.DragDrop += new DragEventHandler(listView1_DragDrop);

            listView1.KeyDown += listView1_KeyDown;


            
        }


        /// <summary>
        /// ListView SetUp Functions
        /// </summary>


        // Starts the drag-and-drop operation when an item is dragged.
        private void listView1_ItemDrag(object sender, ItemDragEventArgs e)
        {
            listView1.DoDragDrop(e.Item, DragDropEffects.Move);
        }

        // Sets the target drop effect.
        private void listView1_DragEnter(object sender, DragEventArgs e)
        {
            e.Effect = e.AllowedEffect;
        }

        // Moves the insertion mark as the item is dragged.
        private void listView1_DragOver(object sender, DragEventArgs e)
        {
            // Retrieve the client coordinates of the mouse pointer.
            Point targetPoint =
                listView1.PointToClient(new Point(e.X, e.Y));

            // Retrieve the index of the item closest to the mouse pointer.
            int targetIndex = listView1.InsertionMark.NearestIndex(targetPoint);

            // Confirm that the mouse pointer is not over the dragged item.
            if (targetIndex > -1)
            {
                // Determine whether the mouse pointer is to the left or
                // the right of the midpoint of the closest item and set
                // the InsertionMark.AppearsAfterItem property accordingly.
                Rectangle itemBounds = listView1.GetItemRect(targetIndex);
                if (targetPoint.X > itemBounds.Left + (itemBounds.Width / 2))
                {
                    listView1.InsertionMark.AppearsAfterItem = true;
                }
                else
                {
                    listView1.InsertionMark.AppearsAfterItem = false;
                }
            }

            // Set the location of the insertion mark. If the mouse is
            // over the dragged item, the targetIndex value is -1 and
            // the insertion mark disappears.
            listView1.InsertionMark.Index = targetIndex;
        }

        // Removes the insertion mark when the mouse leaves the control.
        private void listView1_DragLeave(object sender, EventArgs e)
        {
            listView1.InsertionMark.Index = -1;
        }

        // Moves the item to the location of the insertion mark.
        private void listView1_DragDrop(object sender, DragEventArgs e)
        {
            // Retrieve the index of the insertion mark;
            int targetIndex = listView1.InsertionMark.Index;

            // If the insertion mark is not visible, exit the method.
            if (targetIndex == -1)
            {
                return;
            }

            // If the insertion mark is to the right of the item with
            // the corresponding index, increment the target index.
            if (listView1.InsertionMark.AppearsAfterItem)
            {
                targetIndex++;
            }

            // Retrieve the dragged item.
            ListViewItem draggedItem =
                (ListViewItem)e.Data.GetData(typeof(ListViewItem));

            // Insert a copy of the dragged item at the target index.
            // A copy must be inserted before the original item is removed
            // to preserve item index values. 
            listView1.Items.Insert(
                targetIndex, (ListViewItem)draggedItem.Clone());

            // Remove the original copy of the dragged item.
            listView1.Items.Remove(draggedItem);
        }

        // Sorts ListViewItem objects by index.
        private class ListViewIndexComparer : System.Collections.IComparer
        {
            public int Compare(object x, object y)
            {
                return ((ListViewItem)x).Index - ((ListViewItem)y).Index;
            }
        }

        private void listView1_KeyDown(object sender, KeyEventArgs e)
        {
            if (Keys.Delete == e.KeyCode)
            {
                foreach (ListViewItem listViewItem in ((ListView)sender).SelectedItems)
                {

                    var result  = MessageBox.Show("Delete file: "+ listViewItem.Text , "Are you sure?", MessageBoxButtons.OKCancel); //Gets users input by showing the message box

                    if (result == DialogResult.OK) //Creates the yes function
                    {
                       
                        listViewItem.Remove();
                        
                        string deleteFile = @"C:\Scan\" + selectedImagePath + "\\" + listViewItem.Text;
                        if (File.Exists(deleteFile))
                        {
                            File.Delete(deleteFile);
                        }
                        treeView1.Refresh();
                    }

                    else if (result == DialogResult.Cancel)
                    {
                        this.Close();
                    }
                    
                }
            }
        }





 private void treeView1_AfterSelect_1(System.Object sender, System.Windows.Forms.TreeViewEventArgs e)
        {

            //this.listView1.Items.Clear();
            List<string> names = new List<string>();
            
            if (e.Node.Nodes.Count != 0)
            {
                selectedImagePath = e.Node.Text;
                this.imageList1.Images.Clear();
                listView1.Clear();
                for (int i = 0; i < e.Node.Nodes.Count; i++)
                {
                    string imagePath = e.Node.Nodes[i].Name;
                    if (imagePath.EndsWith(".jpeg"))
                    {
                        if (System.IO.File.Exists(imagePath))
                        {

                            string imageName = Path.GetFileName(imagePath).ToLower();
                            this.imageList1.Images.Add(imageName,Image.FromFile(imagePath));
                            names.Add(imageName);

                        }
                    }
                }
                if (e.Node.Name.EndsWith("png"))
                {
                    //this.richTextBox1.Clear();
                    StreamReader reader = new StreamReader(e.Node.Name);
                    //this.richTextBox1.Text = reader.ReadToEnd();
                    reader.Close();
                }
                // tell your ListView to use the new image list
                imageList1.ImageSize = new Size(200, 250);
                int count = 1;
                listView1.LargeImageList = imageList1;

                foreach (string s in names)
                {
                    ListViewItem lst = new ListViewItem();
                    lst.Text = s;
                    lst.ImageIndex = count++;
                    listView1.Items.Add(lst);
                }


            }

        }
